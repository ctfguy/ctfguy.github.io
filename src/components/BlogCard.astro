---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { parseAuthors } from '@/lib/data-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  entry: CollectionEntry<'blog'>
}

const { entry }     = Astro.props
const authors       = await parseAuthors(entry.data.authors ?? [])
const formattedDate = formatDate(entry.data.date)
const readTime      = readingTime(entry.body!)

// ────────────────────────────────────────────────────────────────
// Use front-matter `image` (recommended) or swap in your own fallback.
const thumbnailSrc  = entry.data.image ?? null
const cardHasThumb  = Boolean(thumbnailSrc)

// ― sizing tokens (Tailwind) ―
const THUMB_MOBILE  = 'w-20 h-20'       // 5 rem (80 px)
const THUMB_DESKTOP = 'sm:w-24 sm:h-24' // 6 rem (96 px)

// Card min-height: top padding (1 rem) + thumb + bottom padding (1 rem)
const CARD_MINH     = 'min-h-28 sm:min-h-32' // 7 rem / 8 rem

// Left padding for text so it never overlaps the thumb
const TEXT_PADDING  = 'pl-28 sm:pl-32'       // 7 rem / 8 rem
---

<div
  class={`hover:bg-secondary/50 relative rounded-xl border p-4
          transition-colors duration-300 ease-in-out
          ${cardHasThumb ? CARD_MINH : ''}`}
>
  {cardHasThumb && (
    <div
      class={`absolute top-4 left-4 overflow-hidden rounded-md
              ${THUMB_MOBILE} ${THUMB_DESKTOP} shrink-0`}
    >
      <Image
        src={thumbnailSrc}
        alt={entry.data.title}
        width={400}
        height={400}
        loading="lazy"
        class="h-full w-full object-cover"
      />
    </div>
  )}

  <Link
    href={`/${entry.collection}/${entry.id}`}
    class={`flex flex-col gap-4 transition-colors duration-300 ease-in-out
            ${cardHasThumb ? TEXT_PADDING : ''}`}
  >
    <!-- ──────── TEXT BLOCK ──────── -->
    <div class="grow grid gap-y-1 sm:grid-cols-[1fr_auto] sm:gap-x-6">
      <!-- Row 1 → title | meta -->
      <h3 class="text-lg font-medium leading-tight">{entry.data.title}</h3>

      <div
        class="flex flex-wrap items-center gap-x-2 text-xs text-muted-foreground
               sm:justify-end sm:whitespace-nowrap"
      >
        {authors.length > 0 && (
          <>
            {authors.map((author) => (
              <div class="flex items-center gap-x-1.5">
                <AvatarComponent
                  client:load
                  src={author.avatar}
                  alt={author.name}
                  fallback={author.name[0]}
                  className="size-5 rounded-full"
                />
                <span>{author.name}</span>
              </div>
            ))}
            <Separator orientation="vertical" className="h-4!" />
          </>
        )}
        <span>{formattedDate}</span>
        <Separator orientation="vertical" className="h-4!" />
        <span>{readTime}</span>
      </div>

      <!-- Row 2 → description | tags -->
      <p class="text-muted-foreground text-sm">{entry.data.description}</p>

      {entry.data.tags && (
        <div class="flex flex-wrap justify-end gap-2 sm:gap-1">
          {entry.data.tags.map((tag) => (
            <Badge variant="secondary" className="flex items-center gap-x-1">
              <Icon name="lucide:hash" class="size-3" />
              {tag}
            </Badge>
          ))}
        </div>
      )}
    </div>
  </Link>
</div>
